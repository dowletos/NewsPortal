# Подключаем созданные модели
from Portal.models import *

#1. Создаём пользоваталей Djano
user1=User.objects.create_user('user1', password='user1')
user2=User.objects.create_user('user2', password='user2')
user3=User.objects.create_user('user3', password='user3')

#2. Создаём авторов Портала.
author1 = Author.objects.create(user=user1)
author2 = Author.objects.create(user=user2)
author3 = Author.objects.create(user=user3)

#3. Добавляем 4 категории в модель Category.
categ1=Category.objects.create(categoryTitle="Политика")
categ2=Category.objects.create(categoryTitle="Спорт")
categ3=Category.objects.create(categoryTitle="Экономика")
categ4=Category.objects.create(categoryTitle="Вакансии")


#4 and #5. Добавляём 2 статьи и 1 новость. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

post1=Post.objects.create(author_ID_FK=author1,post_type="article",post_title="Заголовок1",post_content="Текст1")
PostCategory.objects.create(post_ID_FK=post1,category_ID_FK=Category.objects.get(categoryTitle="Политика"))

post2=Post.objects.create(author_ID_FK=author2,post_type="article",post_title="Заголовок2",post_content="Текст2")
PostCategory.objects.create(post_ID_FK=post2,category_ID_FK=Category.objects.get(categoryTitle="Спорт"))

post3=Post.objects.create(author_ID_FK=author1,post_type="news",post_title="Заголовок3",post_content="Текст3")
PostCategory.objects.create(post_ID_FK=post3,category_ID_FK=Category.objects.get(categoryTitle="Экономика"))
PostCategory.objects.create(post_ID_FK=post3,category_ID_FK=Category.objects.get(categoryTitle="Политика"))


#6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

comment1 = Comments.objects.create(post_ID_FK=post1, user_id=user1, comment_text="Статья/Новость=1 Автор=1 Комментарий №1")
comment2 = Comments.objects.create(post_ID_FK=post2, user_id=user2, comment_text="Статья/Новость=2 Автор=2 Комментарий №1")
comment3 = Comments.objects.create(post_ID_FK=post3, user_id=user1, comment_text="Статья/Новость=3 Автор=1 Комментарий №1")
comment4 = Comments.objects.create(post_ID_FK=post2, user_id=user2, comment_text="Статья/Новость=2 Автор=2 Комментарий №2")
comment5 = Comments.objects.create(post_ID_FK=post3, user_id=user1, comment_text="Статья/Новость=3 Автор=1 Комментарий №2")
comment6 = Comments.objects.create(post_ID_FK=post3, user_id=user1, comment_text="Статья/Новость=3 Автор=1 Комментарий №3")
comment7 = Comments.objects.create(post_ID_FK=post3, user_id=user3, comment_text="Статья/Новость=3 Автор=3 Комментарий №3")

#7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

post1.like()
post2.like() 
post3.like() 
post3.like()   
post3.dislike()    
comment1.like() 
comment2.like() 
comment3.like() 
comment4.like() 
comment5.like() 
comment6.like() 
comment7.like() 
comment5.like() 
comment5.dislike() 


#8. Обновляем рейтинги пользователей.
author1.update_rating()
author2.update_rating()


#9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
best_author=Author.objects.all().order_by("-author_rank")[0] 
print(f'Пользователь:"{best_author}",c максимальныv рейтингом:{best_author.author_rank}')

#10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
best_post=Post.objects.all().order_by("-post_rank")[0]
print(f'Дата добавления: "{best_post.date_and_time_created.date()}", Username автора: "{best_post.author_ID_FK.user}", Заголовок : "{best_post.post_title}", превью : {best_post.preview()} ')

#11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
best_comments=Comments.objects.filter(post_ID_FK_id=best_post) 
for com in best_comments:
    print(f'Дата: "{com.comment_created}", Username автора: "{com.user_id}", Рейтинг: "{com.comment_rank}", Текст: "{com.comment_text}"')








